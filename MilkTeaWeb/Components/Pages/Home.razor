@page "/"
@using MilkTea.Core.Pagination
@using MilkTea.Core.ViewModels
@using MilkTea.Repository.Model
@using MilkTea.Services.ProductServices
@using MilkTea.Services.ToppingServices
@inject IProductService ProductService
@inject IToppingService ToppingService
<PageTitle>Menu</PageTitle>

<h3 class="text-center my-4">Menu Sản Phẩm</h3>

@if (pagedProducts?.Items == null || !pagedProducts.Items.Any())
{
    <p class="text-center">Đang tải sản phẩm...</p>
}
else
{
    <div class="row">
        @foreach (var product in pagedProducts.Items)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@product.ProductName</h5>
                        <p class="card-text">Size S: @product.PriceS.ToString("N0") VNĐ</p>
                        <p class="card-text">Size M: @product.PriceM.ToString("N0") VNĐ</p>
                        <p class="card-text">Size L: @product.PriceL.ToString("N0") VNĐ</p>
                        <button class="btn btn-primary" @onclick="() => OpenModal(product)">Thêm vào giỏ hàng</button>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="d-flex justify-content-center mt-4">
        <nav>
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button type="button" class="page-link" @onclick="() => ChangePage(currentPage - 1)">Trang trước</button>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <button type="button" class="page-link" @onclick="() => ChangePage(pageNumber)">@i</button>
                    </li>
                }
                <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                    <button type="button" class="page-link" @onclick="() => ChangePage(currentPage + 1)">Trang sau</button>
                </li>
            </ul>
        </nav>
    </div>
}

@if (SelectedProduct != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chọn topping cho @SelectedProduct.ProductName</h5>
                    <button type="button" class="close" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    <label class="form-label">Chọn topping:</label>
                    <select class="form-select" @bind="SelectedTopping">
                        <option value="">Không có topping</option>
                        @foreach (var topping in Toppings)
                        {
                            <option value="@topping.ToppingName">@topping.ToppingName - @topping.Price VNĐ</option>
                        }
                    </select>
                    <div class="mt-3">
                        <label class="form-label">Lượng đường: @SugarLevel%</label>
                        <input type="range" class="form-range" min="0" max="100" step="10" @bind="SugarLevel" />
                    </div>
                    <div class="mt-3">
                        <label class="form-label">Lượng đá: @IceLevel%</label>
                        <input type="range" class="form-range" min="0" max="100" step="10" @bind="IceLevel" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="AddToCart">Thêm vào giỏ hàng</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Hủy</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PaginatingResult<Product> pagedProducts;
    private List<ToppingViewModel> Toppings = new();
    private Product SelectedProduct;
    private string SelectedTopping;
    private int SugarLevel = 50;
    private int IceLevel = 50;
    private int currentPage = 1;
    private const int pageSize = 6;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadToppings();
    }

    private async Task LoadProducts()
    {
        try
        {
            pagedProducts = await ProductService.GetPaginatedProductsAsync(currentPage, pageSize);

            if (pagedProducts != null)
            {
                totalPages = (int)Math.Ceiling((double)pagedProducts.TotalCount / pageSize);
                Console.WriteLine($"Trang hiện tại: {currentPage}, Tổng số trang: {totalPages}"); // Debug
            }
            else
            {
                Console.WriteLine("pagedProducts trả về null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải sản phẩm: {ex.Message}");
        }
    }

    private async Task LoadToppings()
    {
        var toppings = await ToppingService.GetAllToppingsAsync();
        Toppings = toppings.ToList();
    }

    private async Task ChangePage(int newPage)
    {
        Console.WriteLine($"ChangePage gọi với trang: {newPage}");

        if (newPage < 1 || newPage > totalPages)
        {
            return;
        }

        currentPage = newPage;
        await LoadProducts();
        Console.WriteLine($"Trang hiện tại sau khi thay đổi: {currentPage}");
        StateHasChanged(); // Cập nhật UI ngay sau khi dữ liệu được tải
    }

    private void OpenModal(Product product)
    {
        SelectedProduct = product;
        // Reset selections for new product
        SelectedTopping = "";
        SugarLevel = 50;
        IceLevel = 50;
        StateHasChanged();
    }

    private void CloseModal()
    {
        SelectedProduct = null;
    }

    private void AddToCart()
    {
        // Thêm sản phẩm vào giỏ hàng (có thể gọi service giỏ hàng nếu cần)
        CloseModal();
    }
}