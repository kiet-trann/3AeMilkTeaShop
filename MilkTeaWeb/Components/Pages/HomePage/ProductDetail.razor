@page "/chitietsanpham/{ProductId:int}"
@using MilkTea.Core.ViewModels
@using MilkTea.Services.OrderServices
@using MilkTea.Services.ProductServices
@using MilkTea.Services.ToppingServices
@inject IProductService ProductService
@inject IToppingService ToppingService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@layout MainLayout
@rendermode InteractiveServer

@code {
    [Parameter] public int ProductId { get; set; }
    private ProductViewModel product;
    private List<string> sizes = new List<string> { "S", "M", "L" };
    private string selectedSize = "M";
    private int quantity = 1;
    private List<ToppingViewModel> toppings = new();
    private Dictionary<int, bool> toppingSelection = new();
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetProductByIdAsync(ProductId);
        toppings = ToppingService.GetAllToppings();

        foreach (var topping in toppings)
        {
            toppingSelection[topping.ToppingId] = false;
        }
    }

    private async Task AddToCart()
    {
        // Kiểm tra xem có cookie UserInfo không
        var userInfoJson = await JSRuntime.InvokeAsync<string>("getCookie", "UserInfo");
        if (string.IsNullOrEmpty(userInfoJson))
        {
            message = "Vui lòng đăng nhập để thêm sản phẩm vào giỏ hàng.";
            NavigationManager.NavigateTo("/dangnhap");
        }

        if (product == null || quantity < 1)
        {
            message = "Vui lòng chọn đầy đủ thông tin.";
            return;
        }

        var orderDetail = new OrderDetailViewModel
            {
                ProductId = product.ProductId,
                ProductName = product.ProductName,
                Size = selectedSize,
                Quantity = quantity,
                UnitPrice = GetPriceBySize()
            };

        var selectedToppings = toppingSelection
            .Where(kv => kv.Value)
            .Select(kv =>
            {
                var topping = toppings.First(t => t.ToppingId == kv.Key);
                return new OrderDetailToppingViewModel
                    {
                        ToppingId = topping.ToppingId,
                        ToppingName = topping.ToppingName,
                        Price = topping.Price,
                        Quantity = 1
                    };
            }).ToList();

        var firstTopping = selectedToppings.FirstOrDefault();

        // Giải mã cookie UserInfo và lấy userId
        var userInfoList = System.Text.Json.JsonSerializer.Deserialize<List<string>>(userInfoJson);
        string userId = userInfoList[5];

        var result = await OrderService.AddProductToOrderAsync(int.Parse(userId), orderDetail, firstTopping);
        message = result;
    }

    private decimal GetPriceBySize()
    {
        return selectedSize switch
        {
            "S" => product.PriceS,
            "M" => product.PriceM,
            "L" => product.PriceL,
            _ => product.PriceM
        };
    }
}

<div class="container mt-5">
    @if (product == null)
    {
        <div class="text-center">
            <p class="fs-5">Đang tải thông tin sản phẩm...</p>
        </div>
    }
    else
    {
        <div class="card shadow-lg p-4">
            <div class="row">
                <!-- Hình ảnh sản phẩm -->
                <div class="col-md-5 text-center">
                    <img src="@product.ImageUrl" alt="@product.ProductName" class="img-fluid rounded" />
                </div>

                <!-- Thông tin sản phẩm -->
                <div class="col-md-7">
                    <h2 class="fw-bold">@product.ProductName</h2>
                    <p class="text-muted">@product.Description</p>

                    <!-- Hiển thị giá động khi chọn size -->
                    <p class="fs-4 text-danger fw-bold">
                        Giá (@selectedSize):
                        @GetPriceBySize().ToString("N0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN")) VND
                    </p>

                    <!-- Size -->
                    <h5 class="mt-3">Chọn Size</h5>
                    <select @bind="selectedSize" class="form-select w-50">
                        @foreach (var size in sizes)
                        {
                            <option value="@size">@size</option>
                        }
                    </select>

                    <!-- Quantity -->
                    <h5 class="mt-3">Số lượng</h5>
                    <input type="number" min="1" class="form-control w-25" @bind="quantity" />

                    <!-- Topping -->
                    <h5 class="mt-4">Chọn Topping</h5>
                    <div class="topping-list">
                        @foreach (var topping in toppings)
                        {
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="topping-@topping.ToppingId"
                                       @bind="toppingSelection[topping.ToppingId]" />
                                <label class="form-check-label" for="topping-@topping.ToppingId">
                                    @topping.ToppingName (@topping.Price.ToString("N0") đ)
                                </label>
                            </div>
                        }
                    </div>

                    <!-- Nút thêm vào giỏ -->
                    <button class="btn btn-primary mt-4 w-100 fw-bold" @onclick="AddToCart">
                        <i class="fas fa-cart-plus"></i> Thêm vào giỏ hàng
                    </button>

                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert alert-info mt-3">@message</div>
                    }
                </div>
            </div>
        </div>
    }
</div>
